// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(ThreadfolioContext))]
    partial class ThreadfolioContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Server.Models.Floss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("TEXT");

                    b.Property<string>("HexColor")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(0)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Floss");
                });

            modelBuilder.Entity("Server.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(0)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Server.Models.ProjectFloss", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlossId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "FlossId");

                    b.HasIndex("FlossId");

                    b.ToTable("ProjectFloss");
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(0)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Server.Models.UserFloss", b =>
                {
                    b.Property<int>("FlossId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.HasKey("FlossId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFloss");
                });

            modelBuilder.Entity("Server.Models.UserProjects", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FlossId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("FlossId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProjects");
                });

            modelBuilder.Entity("Server.Models.ProjectFloss", b =>
                {
                    b.HasOne("Server.Models.Floss", "Floss")
                        .WithMany("ProjectFloss")
                        .HasForeignKey("FlossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.Project", "Project")
                        .WithMany("ProjectFloss")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floss");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Server.Models.UserFloss", b =>
                {
                    b.HasOne("Server.Models.Floss", "Floss")
                        .WithMany("UserFloss")
                        .HasForeignKey("FlossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", "User")
                        .WithMany("UserFloss")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floss");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.UserProjects", b =>
                {
                    b.HasOne("Server.Models.Floss", null)
                        .WithMany("UserProjects")
                        .HasForeignKey("FlossId");

                    b.HasOne("Server.Models.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.Floss", b =>
                {
                    b.Navigation("ProjectFloss");

                    b.Navigation("UserFloss");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("Server.Models.Project", b =>
                {
                    b.Navigation("ProjectFloss");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Navigation("UserFloss");

                    b.Navigation("UserProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
